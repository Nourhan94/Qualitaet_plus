# coding: utf-8

"""
    Student-Management-System-API

    The Student-Management-System-API. <a href='http://147.172.178.30:8080/stmgmt/api-json'>JSON</a>  # noqa: E501

    OpenAPI spec version: 2.7.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class AssessmentApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def convert_group_to_individual_assessment(self, course_id, assignment_id, assessment_id, **kwargs):  # noqa: E501
        """Convert group to individual assessment.  # noqa: E501

        Removes the group assessment and creates assessments for each member instead.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.convert_group_to_individual_assessment(course_id, assignment_id, assessment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: (required)
        :param str assignment_id: (required)
        :param str assessment_id: (required)
        :return: list[AssessmentDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.convert_group_to_individual_assessment_with_http_info(course_id, assignment_id, assessment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.convert_group_to_individual_assessment_with_http_info(course_id, assignment_id, assessment_id, **kwargs)  # noqa: E501
            return data

    def convert_group_to_individual_assessment_with_http_info(self, course_id, assignment_id, assessment_id, **kwargs):  # noqa: E501
        """Convert group to individual assessment.  # noqa: E501

        Removes the group assessment and creates assessments for each member instead.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.convert_group_to_individual_assessment_with_http_info(course_id, assignment_id, assessment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: (required)
        :param str assignment_id: (required)
        :param str assessment_id: (required)
        :return: list[AssessmentDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'assignment_id', 'assessment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method convert_group_to_individual_assessment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if ('course_id' not in params or
                params['course_id'] is None):
            raise ValueError("Missing the required parameter `course_id` when calling `convert_group_to_individual_assessment`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if ('assignment_id' not in params or
                params['assignment_id'] is None):
            raise ValueError("Missing the required parameter `assignment_id` when calling `convert_group_to_individual_assessment`")  # noqa: E501
        # verify the required parameter 'assessment_id' is set
        if ('assessment_id' not in params or
                params['assessment_id'] is None):
            raise ValueError("Missing the required parameter `assessment_id` when calling `convert_group_to_individual_assessment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['courseId'] = params['course_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignmentId'] = params['assignment_id']  # noqa: E501
        if 'assessment_id' in params:
            path_params['assessmentId'] = params['assessment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/courses/{courseId}/assignments/{assignmentId}/assessments/{assessmentId}/convert-to-individual', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AssessmentDto]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_assessment(self, body, course_id, assignment_id, **kwargs):  # noqa: E501
        """Create assessment.  # noqa: E501

        Creates a new assessment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_assessment(body, course_id, assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssessmentCreateDto body: (required)
        :param str course_id: (required)
        :param str assignment_id: (required)
        :return: AssessmentDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_assessment_with_http_info(body, course_id, assignment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_assessment_with_http_info(body, course_id, assignment_id, **kwargs)  # noqa: E501
            return data

    def create_assessment_with_http_info(self, body, course_id, assignment_id, **kwargs):  # noqa: E501
        """Create assessment.  # noqa: E501

        Creates a new assessment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_assessment_with_http_info(body, course_id, assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssessmentCreateDto body: (required)
        :param str course_id: (required)
        :param str assignment_id: (required)
        :return: AssessmentDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'course_id', 'assignment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_assessment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_assessment`")  # noqa: E501
        # verify the required parameter 'course_id' is set
        if ('course_id' not in params or
                params['course_id'] is None):
            raise ValueError("Missing the required parameter `course_id` when calling `create_assessment`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if ('assignment_id' not in params or
                params['assignment_id'] is None):
            raise ValueError("Missing the required parameter `assignment_id` when calling `create_assessment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['courseId'] = params['course_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignmentId'] = params['assignment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/courses/{courseId}/assignments/{assignmentId}/assessments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssessmentDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_assessments(self, body, course_id, assignment_id, **kwargs):  # noqa: E501
        """Create multiple assessments.  # noqa: E501

        Creates multiple assessments at once.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_assessments(body, course_id, assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[AssessmentCreateDto] body: (required)
        :param str course_id: (required)
        :param str assignment_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_assessments_with_http_info(body, course_id, assignment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_assessments_with_http_info(body, course_id, assignment_id, **kwargs)  # noqa: E501
            return data

    def create_assessments_with_http_info(self, body, course_id, assignment_id, **kwargs):  # noqa: E501
        """Create multiple assessments.  # noqa: E501

        Creates multiple assessments at once.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_assessments_with_http_info(body, course_id, assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[AssessmentCreateDto] body: (required)
        :param str course_id: (required)
        :param str assignment_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'course_id', 'assignment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_assessments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_assessments`")  # noqa: E501
        # verify the required parameter 'course_id' is set
        if ('course_id' not in params or
                params['course_id'] is None):
            raise ValueError("Missing the required parameter `course_id` when calling `create_assessments`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if ('assignment_id' not in params or
                params['assignment_id'] is None):
            raise ValueError("Missing the required parameter `assignment_id` when calling `create_assessments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['courseId'] = params['course_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignmentId'] = params['assignment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/courses/{courseId}/assignments/{assignmentId}/assessments/bulk', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_assessment(self, course_id, assignment_id, assessment_id, **kwargs):  # noqa: E501
        """Delete assessment.  # noqa: E501

        Deletes the assessment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_assessment(course_id, assignment_id, assessment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: (required)
        :param str assignment_id: (required)
        :param str assessment_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_assessment_with_http_info(course_id, assignment_id, assessment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_assessment_with_http_info(course_id, assignment_id, assessment_id, **kwargs)  # noqa: E501
            return data

    def delete_assessment_with_http_info(self, course_id, assignment_id, assessment_id, **kwargs):  # noqa: E501
        """Delete assessment.  # noqa: E501

        Deletes the assessment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_assessment_with_http_info(course_id, assignment_id, assessment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: (required)
        :param str assignment_id: (required)
        :param str assessment_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'assignment_id', 'assessment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_assessment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if ('course_id' not in params or
                params['course_id'] is None):
            raise ValueError("Missing the required parameter `course_id` when calling `delete_assessment`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if ('assignment_id' not in params or
                params['assignment_id'] is None):
            raise ValueError("Missing the required parameter `assignment_id` when calling `delete_assessment`")  # noqa: E501
        # verify the required parameter 'assessment_id' is set
        if ('assessment_id' not in params or
                params['assessment_id'] is None):
            raise ValueError("Missing the required parameter `assessment_id` when calling `delete_assessment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['courseId'] = params['course_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignmentId'] = params['assignment_id']  # noqa: E501
        if 'assessment_id' in params:
            path_params['assessmentId'] = params['assessment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/courses/{courseId}/assignments/{assignmentId}/assessments/{assessmentId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_assessment_by_id(self, course_id, assignment_id, assessment_id, **kwargs):  # noqa: E501
        """Get assessment.  # noqa: E501

        Retrieves the assessment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_assessment_by_id(course_id, assignment_id, assessment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: (required)
        :param str assignment_id: (required)
        :param str assessment_id: (required)
        :return: AssessmentDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_assessment_by_id_with_http_info(course_id, assignment_id, assessment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_assessment_by_id_with_http_info(course_id, assignment_id, assessment_id, **kwargs)  # noqa: E501
            return data

    def get_assessment_by_id_with_http_info(self, course_id, assignment_id, assessment_id, **kwargs):  # noqa: E501
        """Get assessment.  # noqa: E501

        Retrieves the assessment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_assessment_by_id_with_http_info(course_id, assignment_id, assessment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: (required)
        :param str assignment_id: (required)
        :param str assessment_id: (required)
        :return: AssessmentDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'assignment_id', 'assessment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_assessment_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if ('course_id' not in params or
                params['course_id'] is None):
            raise ValueError("Missing the required parameter `course_id` when calling `get_assessment_by_id`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if ('assignment_id' not in params or
                params['assignment_id'] is None):
            raise ValueError("Missing the required parameter `assignment_id` when calling `get_assessment_by_id`")  # noqa: E501
        # verify the required parameter 'assessment_id' is set
        if ('assessment_id' not in params or
                params['assessment_id'] is None):
            raise ValueError("Missing the required parameter `assessment_id` when calling `get_assessment_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['courseId'] = params['course_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignmentId'] = params['assignment_id']  # noqa: E501
        if 'assessment_id' in params:
            path_params['assessmentId'] = params['assessment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/courses/{courseId}/assignments/{assignmentId}/assessments/{assessmentId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssessmentDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_assessments_for_assignment(self, course_id, assignment_id, **kwargs):  # noqa: E501
        """Get assessments of assignment.  # noqa: E501

        Retrieves assessments that have been created for the assignment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_assessments_for_assignment(course_id, assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: (required)
        :param str assignment_id: (required)
        :param float skip: [Pagination] The amount of elements that should be skipped.
        :param float take: [Pagination] The amount of elements that should be included in the response.
        :param str name: Name of group or user. Matched with ILIKE %name%.
        :param str group_id: Retrieves assessment of specific group.
        :param str user_id: Retrieves assessment of specific user.
        :param float min_score: Only includes assessments with achievedPoints >= minScore, if specified.
        :param str creator_id: Only includes assessments created by specified user.
        :return: list[AssessmentDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_assessments_for_assignment_with_http_info(course_id, assignment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_assessments_for_assignment_with_http_info(course_id, assignment_id, **kwargs)  # noqa: E501
            return data

    def get_assessments_for_assignment_with_http_info(self, course_id, assignment_id, **kwargs):  # noqa: E501
        """Get assessments of assignment.  # noqa: E501

        Retrieves assessments that have been created for the assignment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_assessments_for_assignment_with_http_info(course_id, assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: (required)
        :param str assignment_id: (required)
        :param float skip: [Pagination] The amount of elements that should be skipped.
        :param float take: [Pagination] The amount of elements that should be included in the response.
        :param str name: Name of group or user. Matched with ILIKE %name%.
        :param str group_id: Retrieves assessment of specific group.
        :param str user_id: Retrieves assessment of specific user.
        :param float min_score: Only includes assessments with achievedPoints >= minScore, if specified.
        :param str creator_id: Only includes assessments created by specified user.
        :return: list[AssessmentDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'assignment_id', 'skip', 'take', 'name', 'group_id', 'user_id', 'min_score', 'creator_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_assessments_for_assignment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if ('course_id' not in params or
                params['course_id'] is None):
            raise ValueError("Missing the required parameter `course_id` when calling `get_assessments_for_assignment`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if ('assignment_id' not in params or
                params['assignment_id'] is None):
            raise ValueError("Missing the required parameter `assignment_id` when calling `get_assessments_for_assignment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['courseId'] = params['course_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignmentId'] = params['assignment_id']  # noqa: E501

        query_params = []
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'take' in params:
            query_params.append(('take', params['take']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'group_id' in params:
            query_params.append(('groupId', params['group_id']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501
        if 'min_score' in params:
            query_params.append(('minScore', params['min_score']))  # noqa: E501
        if 'creator_id' in params:
            query_params.append(('creatorId', params['creator_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/courses/{courseId}/assignments/{assignmentId}/assessments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AssessmentDto]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_events_of_assessment(self, course_id, assignment_id, assessment_id, **kwargs):  # noqa: E501
        """Get assessment events.  # noqa: E501

        Retrieves events of the assessment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_events_of_assessment(course_id, assignment_id, assessment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: (required)
        :param str assignment_id: (required)
        :param str assessment_id: (required)
        :return: list[AssessmentEventDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_events_of_assessment_with_http_info(course_id, assignment_id, assessment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_events_of_assessment_with_http_info(course_id, assignment_id, assessment_id, **kwargs)  # noqa: E501
            return data

    def get_events_of_assessment_with_http_info(self, course_id, assignment_id, assessment_id, **kwargs):  # noqa: E501
        """Get assessment events.  # noqa: E501

        Retrieves events of the assessment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_events_of_assessment_with_http_info(course_id, assignment_id, assessment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: (required)
        :param str assignment_id: (required)
        :param str assessment_id: (required)
        :return: list[AssessmentEventDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'assignment_id', 'assessment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_events_of_assessment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if ('course_id' not in params or
                params['course_id'] is None):
            raise ValueError("Missing the required parameter `course_id` when calling `get_events_of_assessment`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if ('assignment_id' not in params or
                params['assignment_id'] is None):
            raise ValueError("Missing the required parameter `assignment_id` when calling `get_events_of_assessment`")  # noqa: E501
        # verify the required parameter 'assessment_id' is set
        if ('assessment_id' not in params or
                params['assessment_id'] is None):
            raise ValueError("Missing the required parameter `assessment_id` when calling `get_events_of_assessment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['courseId'] = params['course_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignmentId'] = params['assignment_id']  # noqa: E501
        if 'assessment_id' in params:
            path_params['assessmentId'] = params['assessment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/courses/{courseId}/assignments/{assignmentId}/assessments/{assessmentId}/events', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AssessmentEventDto]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_partial_assessment(self, body, course_id, assignment_id, assessment_id, **kwargs):  # noqa: E501
        """Set partial assessment.  # noqa: E501

        Adds or updates the partial assessment with the specified key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_partial_assessment(body, course_id, assignment_id, assessment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PartialAssessmentDto body: (required)
        :param str course_id: (required)
        :param str assignment_id: (required)
        :param str assessment_id: (required)
        :return: PartialAssessmentDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_partial_assessment_with_http_info(body, course_id, assignment_id, assessment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.set_partial_assessment_with_http_info(body, course_id, assignment_id, assessment_id, **kwargs)  # noqa: E501
            return data

    def set_partial_assessment_with_http_info(self, body, course_id, assignment_id, assessment_id, **kwargs):  # noqa: E501
        """Set partial assessment.  # noqa: E501

        Adds or updates the partial assessment with the specified key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_partial_assessment_with_http_info(body, course_id, assignment_id, assessment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PartialAssessmentDto body: (required)
        :param str course_id: (required)
        :param str assignment_id: (required)
        :param str assessment_id: (required)
        :return: PartialAssessmentDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'course_id', 'assignment_id', 'assessment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_partial_assessment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `set_partial_assessment`")  # noqa: E501
        # verify the required parameter 'course_id' is set
        if ('course_id' not in params or
                params['course_id'] is None):
            raise ValueError("Missing the required parameter `course_id` when calling `set_partial_assessment`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if ('assignment_id' not in params or
                params['assignment_id'] is None):
            raise ValueError("Missing the required parameter `assignment_id` when calling `set_partial_assessment`")  # noqa: E501
        # verify the required parameter 'assessment_id' is set
        if ('assessment_id' not in params or
                params['assessment_id'] is None):
            raise ValueError("Missing the required parameter `assessment_id` when calling `set_partial_assessment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['courseId'] = params['course_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignmentId'] = params['assignment_id']  # noqa: E501
        if 'assessment_id' in params:
            path_params['assessmentId'] = params['assessment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/courses/{courseId}/assignments/{assignmentId}/assessments/{assessmentId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PartialAssessmentDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_assessment(self, body, course_id, assignment_id, assessment_id, **kwargs):  # noqa: E501
        """Update assessment.  # noqa: E501

        Updates the assessment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_assessment(body, course_id, assignment_id, assessment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssessmentUpdateDto body: (required)
        :param str course_id: (required)
        :param str assignment_id: (required)
        :param str assessment_id: (required)
        :return: AssessmentDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_assessment_with_http_info(body, course_id, assignment_id, assessment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_assessment_with_http_info(body, course_id, assignment_id, assessment_id, **kwargs)  # noqa: E501
            return data

    def update_assessment_with_http_info(self, body, course_id, assignment_id, assessment_id, **kwargs):  # noqa: E501
        """Update assessment.  # noqa: E501

        Updates the assessment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_assessment_with_http_info(body, course_id, assignment_id, assessment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssessmentUpdateDto body: (required)
        :param str course_id: (required)
        :param str assignment_id: (required)
        :param str assessment_id: (required)
        :return: AssessmentDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'course_id', 'assignment_id', 'assessment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_assessment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_assessment`")  # noqa: E501
        # verify the required parameter 'course_id' is set
        if ('course_id' not in params or
                params['course_id'] is None):
            raise ValueError("Missing the required parameter `course_id` when calling `update_assessment`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if ('assignment_id' not in params or
                params['assignment_id'] is None):
            raise ValueError("Missing the required parameter `assignment_id` when calling `update_assessment`")  # noqa: E501
        # verify the required parameter 'assessment_id' is set
        if ('assessment_id' not in params or
                params['assessment_id'] is None):
            raise ValueError("Missing the required parameter `assessment_id` when calling `update_assessment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['courseId'] = params['course_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignmentId'] = params['assignment_id']  # noqa: E501
        if 'assessment_id' in params:
            path_params['assessmentId'] = params['assessment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/courses/{courseId}/assignments/{assignmentId}/assessments/{assessmentId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssessmentDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
