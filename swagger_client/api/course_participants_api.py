# coding: utf-8

"""
    Student-Management-System-API

    The Student-Management-System-API. <a href='http://147.172.178.30:8080/stmgmt/api-json'>JSON</a>  # noqa: E501

    OpenAPI spec version: 2.7.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class CourseParticipantsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_user(self, body, course_id, user_id, **kwargs):  # noqa: E501
        """Add user to course.  # noqa: E501

        Adds a user to the course. If the course requires a password, the correct password needs to be included in the request body.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_user(body, course_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PasswordDto body: (required)
        :param str course_id: (required)
        :param str user_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_user_with_http_info(body, course_id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_user_with_http_info(body, course_id, user_id, **kwargs)  # noqa: E501
            return data

    def add_user_with_http_info(self, body, course_id, user_id, **kwargs):  # noqa: E501
        """Add user to course.  # noqa: E501

        Adds a user to the course. If the course requires a password, the correct password needs to be included in the request body.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_user_with_http_info(body, course_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PasswordDto body: (required)
        :param str course_id: (required)
        :param str user_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'course_id', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_user`")  # noqa: E501
        # verify the required parameter 'course_id' is set
        if ('course_id' not in params or
                params['course_id'] is None):
            raise ValueError("Missing the required parameter `course_id` when calling `add_user`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `add_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['courseId'] = params['course_id']  # noqa: E501
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/courses/{courseId}/users/{userId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def can_user_join_course(self, course_id, user_id, **kwargs):  # noqa: E501
        """Check if joining is possible.  # noqa: E501

        Checks, if the user is able to join the course. A user can join a course, if he's not already a member and the course is not closed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.can_user_join_course(course_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: (required)
        :param str user_id: (required)
        :return: CanJoinCourseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.can_user_join_course_with_http_info(course_id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.can_user_join_course_with_http_info(course_id, user_id, **kwargs)  # noqa: E501
            return data

    def can_user_join_course_with_http_info(self, course_id, user_id, **kwargs):  # noqa: E501
        """Check if joining is possible.  # noqa: E501

        Checks, if the user is able to join the course. A user can join a course, if he's not already a member and the course is not closed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.can_user_join_course_with_http_info(course_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: (required)
        :param str user_id: (required)
        :return: CanJoinCourseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method can_user_join_course" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if ('course_id' not in params or
                params['course_id'] is None):
            raise ValueError("Missing the required parameter `course_id` when calling `can_user_join_course`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `can_user_join_course`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['courseId'] = params['course_id']  # noqa: E501
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/courses/{courseId}/users/{userId}/canJoin', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CanJoinCourseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def compare_participants_list(self, course_id, compare_to_course_ids, **kwargs):  # noqa: E501
        """Compare participants list..  # noqa: E501

        Returns an Object, which divides the course participants in two groups (in/out).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.compare_participants_list(course_id, compare_to_course_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: (required)
        :param list[str] compare_to_course_ids: (required)
        :return: ParticipantsComparisonDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.compare_participants_list_with_http_info(course_id, compare_to_course_ids, **kwargs)  # noqa: E501
        else:
            (data) = self.compare_participants_list_with_http_info(course_id, compare_to_course_ids, **kwargs)  # noqa: E501
            return data

    def compare_participants_list_with_http_info(self, course_id, compare_to_course_ids, **kwargs):  # noqa: E501
        """Compare participants list..  # noqa: E501

        Returns an Object, which divides the course participants in two groups (in/out).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.compare_participants_list_with_http_info(course_id, compare_to_course_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: (required)
        :param list[str] compare_to_course_ids: (required)
        :return: ParticipantsComparisonDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'compare_to_course_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method compare_participants_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if ('course_id' not in params or
                params['course_id'] is None):
            raise ValueError("Missing the required parameter `course_id` when calling `compare_participants_list`")  # noqa: E501
        # verify the required parameter 'compare_to_course_ids' is set
        if ('compare_to_course_ids' not in params or
                params['compare_to_course_ids'] is None):
            raise ValueError("Missing the required parameter `compare_to_course_ids` when calling `compare_participants_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['courseId'] = params['course_id']  # noqa: E501

        query_params = []
        if 'compare_to_course_ids' in params:
            query_params.append(('compareToCourseIds', params['compare_to_course_ids']))  # noqa: E501
            collection_formats['compareToCourseIds'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/courses/{courseId}/users/query/compare-participants-list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ParticipantsComparisonDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_participant(self, course_id, user_id, **kwargs):  # noqa: E501
        """Get participant.  # noqa: E501

        Retrieves a specific participant and course related information about the participant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_participant(course_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: (required)
        :param str user_id: (required)
        :return: ParticipantDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_participant_with_http_info(course_id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_participant_with_http_info(course_id, user_id, **kwargs)  # noqa: E501
            return data

    def get_participant_with_http_info(self, course_id, user_id, **kwargs):  # noqa: E501
        """Get participant.  # noqa: E501

        Retrieves a specific participant and course related information about the participant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_participant_with_http_info(course_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: (required)
        :param str user_id: (required)
        :return: ParticipantDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_participant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if ('course_id' not in params or
                params['course_id'] is None):
            raise ValueError("Missing the required parameter `course_id` when calling `get_participant`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `get_participant`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['courseId'] = params['course_id']  # noqa: E501
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/courses/{courseId}/users/{userId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ParticipantDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_participants_by_matr_nr(self, course_id, matr_nr, **kwargs):  # noqa: E501
        """Get participants of course by matrNr.  # noqa: E501

        Returns participants by their matrNr. The response only includes participants that were found, meaning unknown matrNrs will be ignored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_participants_by_matr_nr(course_id, matr_nr, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: (required)
        :param list[float] matr_nr: (required)
        :return: list[ParticipantDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_participants_by_matr_nr_with_http_info(course_id, matr_nr, **kwargs)  # noqa: E501
        else:
            (data) = self.get_participants_by_matr_nr_with_http_info(course_id, matr_nr, **kwargs)  # noqa: E501
            return data

    def get_participants_by_matr_nr_with_http_info(self, course_id, matr_nr, **kwargs):  # noqa: E501
        """Get participants of course by matrNr.  # noqa: E501

        Returns participants by their matrNr. The response only includes participants that were found, meaning unknown matrNrs will be ignored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_participants_by_matr_nr_with_http_info(course_id, matr_nr, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: (required)
        :param list[float] matr_nr: (required)
        :return: list[ParticipantDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'matr_nr']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_participants_by_matr_nr" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if ('course_id' not in params or
                params['course_id'] is None):
            raise ValueError("Missing the required parameter `course_id` when calling `get_participants_by_matr_nr`")  # noqa: E501
        # verify the required parameter 'matr_nr' is set
        if ('matr_nr' not in params or
                params['matr_nr'] is None):
            raise ValueError("Missing the required parameter `matr_nr` when calling `get_participants_by_matr_nr`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['courseId'] = params['course_id']  # noqa: E501

        query_params = []
        if 'matr_nr' in params:
            query_params.append(('matrNr', params['matr_nr']))  # noqa: E501
            collection_formats['matrNr'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/courses/{courseId}/users/matrNrs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ParticipantDto]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_participants_with_assigned_evaluator(self, course_id, assignment_id, **kwargs):  # noqa: E501
        """Get participants with assigned evaluator.  # noqa: E501

        Returns participants with their assigned evaluator for a particular assignment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_participants_with_assigned_evaluator(course_id, assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: (required)
        :param str assignment_id: (required)
        :param float skip: [Pagination] The amount of elements that should be skipped.
        :param float take: [Pagination] The amount of elements that should be included in the response.
        :param str assigned_evaluator_id: Filter by assigned evaluator.
        :param bool exclude_already_reviewed: Excludes groups/users that have already been reviewed.
        :param str name_of_group_or_user: Filter by group or username.
        :return: list[ParticipantsWithAssignedEvaluatorDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_participants_with_assigned_evaluator_with_http_info(course_id, assignment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_participants_with_assigned_evaluator_with_http_info(course_id, assignment_id, **kwargs)  # noqa: E501
            return data

    def get_participants_with_assigned_evaluator_with_http_info(self, course_id, assignment_id, **kwargs):  # noqa: E501
        """Get participants with assigned evaluator.  # noqa: E501

        Returns participants with their assigned evaluator for a particular assignment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_participants_with_assigned_evaluator_with_http_info(course_id, assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: (required)
        :param str assignment_id: (required)
        :param float skip: [Pagination] The amount of elements that should be skipped.
        :param float take: [Pagination] The amount of elements that should be included in the response.
        :param str assigned_evaluator_id: Filter by assigned evaluator.
        :param bool exclude_already_reviewed: Excludes groups/users that have already been reviewed.
        :param str name_of_group_or_user: Filter by group or username.
        :return: list[ParticipantsWithAssignedEvaluatorDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'assignment_id', 'skip', 'take', 'assigned_evaluator_id', 'exclude_already_reviewed', 'name_of_group_or_user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_participants_with_assigned_evaluator" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if ('course_id' not in params or
                params['course_id'] is None):
            raise ValueError("Missing the required parameter `course_id` when calling `get_participants_with_assigned_evaluator`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if ('assignment_id' not in params or
                params['assignment_id'] is None):
            raise ValueError("Missing the required parameter `assignment_id` when calling `get_participants_with_assigned_evaluator`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['courseId'] = params['course_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignmentId'] = params['assignment_id']  # noqa: E501

        query_params = []
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'take' in params:
            query_params.append(('take', params['take']))  # noqa: E501
        if 'assigned_evaluator_id' in params:
            query_params.append(('assignedEvaluatorId', params['assigned_evaluator_id']))  # noqa: E501
        if 'exclude_already_reviewed' in params:
            query_params.append(('excludeAlreadyReviewed', params['exclude_already_reviewed']))  # noqa: E501
        if 'name_of_group_or_user' in params:
            query_params.append(('nameOfGroupOrUser', params['name_of_group_or_user']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/courses/{courseId}/users/assignments/{assignmentId}/with-assigned-evaluator', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ParticipantsWithAssignedEvaluatorDto]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_users_of_course(self, course_id, **kwargs):  # noqa: E501
        """Get users of course.  # noqa: E501

        Returns a collection of users that are signed up for this course.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_users_of_course(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: (required)
        :param float skip: [Pagination] The amount of elements that should be skipped.
        :param float take: [Pagination] The amount of elements that should be included in the response.
        :param list[str] course_role:
        :param str name: Compared to the participant's username and displayName with ILIKE %name%.
        :param str group_name: Filters by a student's current group. Compared with ILIKE %groupName%.
        :return: list[ParticipantDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_users_of_course_with_http_info(course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_users_of_course_with_http_info(course_id, **kwargs)  # noqa: E501
            return data

    def get_users_of_course_with_http_info(self, course_id, **kwargs):  # noqa: E501
        """Get users of course.  # noqa: E501

        Returns a collection of users that are signed up for this course.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_users_of_course_with_http_info(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: (required)
        :param float skip: [Pagination] The amount of elements that should be skipped.
        :param float take: [Pagination] The amount of elements that should be included in the response.
        :param list[str] course_role:
        :param str name: Compared to the participant's username and displayName with ILIKE %name%.
        :param str group_name: Filters by a student's current group. Compared with ILIKE %groupName%.
        :return: list[ParticipantDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'skip', 'take', 'course_role', 'name', 'group_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_users_of_course" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if ('course_id' not in params or
                params['course_id'] is None):
            raise ValueError("Missing the required parameter `course_id` when calling `get_users_of_course`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['courseId'] = params['course_id']  # noqa: E501

        query_params = []
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'take' in params:
            query_params.append(('take', params['take']))  # noqa: E501
        if 'course_role' in params:
            query_params.append(('courseRole', params['course_role']))  # noqa: E501
            collection_formats['courseRole'] = 'multi'  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'group_name' in params:
            query_params.append(('groupName', params['group_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/courses/{courseId}/users', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ParticipantDto]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_user(self, course_id, user_id, **kwargs):  # noqa: E501
        """Remove user from course.  # noqa: E501

        Removes the user from the course. Returns true, if removal was successful.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_user(course_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: (required)
        :param str user_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_user_with_http_info(course_id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_user_with_http_info(course_id, user_id, **kwargs)  # noqa: E501
            return data

    def remove_user_with_http_info(self, course_id, user_id, **kwargs):  # noqa: E501
        """Remove user from course.  # noqa: E501

        Removes the user from the course. Returns true, if removal was successful.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_user_with_http_info(course_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: (required)
        :param str user_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if ('course_id' not in params or
                params['course_id'] is None):
            raise ValueError("Missing the required parameter `course_id` when calling `remove_user`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `remove_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['courseId'] = params['course_id']  # noqa: E501
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/courses/{courseId}/users/{userId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_user_role(self, body, course_id, user_id, **kwargs):  # noqa: E501
        """Update user's role in course.  # noqa: E501

        Assigns the given role to the user of this course.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_user_role(body, course_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ChangeCourseRoleDto body: (required)
        :param str course_id: (required)
        :param str user_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_user_role_with_http_info(body, course_id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_user_role_with_http_info(body, course_id, user_id, **kwargs)  # noqa: E501
            return data

    def update_user_role_with_http_info(self, body, course_id, user_id, **kwargs):  # noqa: E501
        """Update user's role in course.  # noqa: E501

        Assigns the given role to the user of this course.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_user_role_with_http_info(body, course_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ChangeCourseRoleDto body: (required)
        :param str course_id: (required)
        :param str user_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'course_id', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_user_role" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_user_role`")  # noqa: E501
        # verify the required parameter 'course_id' is set
        if ('course_id' not in params or
                params['course_id'] is None):
            raise ValueError("Missing the required parameter `course_id` when calling `update_user_role`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `update_user_role`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['courseId'] = params['course_id']  # noqa: E501
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/courses/{courseId}/users/{userId}/role', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
