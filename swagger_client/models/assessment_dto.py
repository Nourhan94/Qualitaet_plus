# coding: utf-8

"""
    Student-Management-System-API

    The Student-Management-System-API. <a href='http://147.172.178.30:8080/stmgmt/api-json'>JSON</a>  # noqa: E501

    OpenAPI spec version: 2.7.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AssessmentDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'assignment_id': 'str',
        'is_draft': 'bool',
        'achieved_points': 'float',
        'comment': 'str',
        'group_id': 'str',
        'user_id': 'str',
        'creator_id': 'str',
        'last_updated_by_id': 'str',
        'assignment': 'AssignmentDto',
        'group': 'GroupDto',
        'participant': 'ParticipantDto',
        'creator': 'UserDto',
        'last_updated_by': 'UserDto',
        'creation_date': 'datetime',
        'update_date': 'datetime',
        'partial_assessments': 'list[PartialAssessmentDto]'
    }

    attribute_map = {
        'id': 'id',
        'assignment_id': 'assignmentId',
        'is_draft': 'isDraft',
        'achieved_points': 'achievedPoints',
        'comment': 'comment',
        'group_id': 'groupId',
        'user_id': 'userId',
        'creator_id': 'creatorId',
        'last_updated_by_id': 'lastUpdatedById',
        'assignment': 'assignment',
        'group': 'group',
        'participant': 'participant',
        'creator': 'creator',
        'last_updated_by': 'lastUpdatedBy',
        'creation_date': 'creationDate',
        'update_date': 'updateDate',
        'partial_assessments': 'partialAssessments'
    }

    def __init__(self, id=None, assignment_id=None, is_draft=None, achieved_points=None, comment=None, group_id=None, user_id=None, creator_id=None, last_updated_by_id=None, assignment=None, group=None, participant=None, creator=None, last_updated_by=None, creation_date=None, update_date=None, partial_assessments=None):  # noqa: E501
        """AssessmentDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._assignment_id = None
        self._is_draft = None
        self._achieved_points = None
        self._comment = None
        self._group_id = None
        self._user_id = None
        self._creator_id = None
        self._last_updated_by_id = None
        self._assignment = None
        self._group = None
        self._participant = None
        self._creator = None
        self._last_updated_by = None
        self._creation_date = None
        self._update_date = None
        self._partial_assessments = None
        self.discriminator = None
        self.id = id
        self.assignment_id = assignment_id
        self.is_draft = is_draft
        if achieved_points is not None:
            self.achieved_points = achieved_points
        if comment is not None:
            self.comment = comment
        if group_id is not None:
            self.group_id = group_id
        if user_id is not None:
            self.user_id = user_id
        if creator_id is not None:
            self.creator_id = creator_id
        if last_updated_by_id is not None:
            self.last_updated_by_id = last_updated_by_id
        if assignment is not None:
            self.assignment = assignment
        if group is not None:
            self.group = group
        if participant is not None:
            self.participant = participant
        if creator is not None:
            self.creator = creator
        if last_updated_by is not None:
            self.last_updated_by = last_updated_by
        if creation_date is not None:
            self.creation_date = creation_date
        if update_date is not None:
            self.update_date = update_date
        if partial_assessments is not None:
            self.partial_assessments = partial_assessments

    @property
    def id(self):
        """Gets the id of this AssessmentDto.  # noqa: E501

        Unique identifier of this assessment.  # noqa: E501

        :return: The id of this AssessmentDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AssessmentDto.

        Unique identifier of this assessment.  # noqa: E501

        :param id: The id of this AssessmentDto.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def assignment_id(self):
        """Gets the assignment_id of this AssessmentDto.  # noqa: E501

        Identifier of the assignment that is being evaluated by this assessment.  # noqa: E501

        :return: The assignment_id of this AssessmentDto.  # noqa: E501
        :rtype: str
        """
        return self._assignment_id

    @assignment_id.setter
    def assignment_id(self, assignment_id):
        """Sets the assignment_id of this AssessmentDto.

        Identifier of the assignment that is being evaluated by this assessment.  # noqa: E501

        :param assignment_id: The assignment_id of this AssessmentDto.  # noqa: E501
        :type: str
        """
        if assignment_id is None:
            raise ValueError("Invalid value for `assignment_id`, must not be `None`")  # noqa: E501

        self._assignment_id = assignment_id

    @property
    def is_draft(self):
        """Gets the is_draft of this AssessmentDto.  # noqa: E501

        Marks the assessment as a draft.  # noqa: E501

        :return: The is_draft of this AssessmentDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_draft

    @is_draft.setter
    def is_draft(self, is_draft):
        """Sets the is_draft of this AssessmentDto.

        Marks the assessment as a draft.  # noqa: E501

        :param is_draft: The is_draft of this AssessmentDto.  # noqa: E501
        :type: bool
        """
        if is_draft is None:
            raise ValueError("Invalid value for `is_draft`, must not be `None`")  # noqa: E501

        self._is_draft = is_draft

    @property
    def achieved_points(self):
        """Gets the achieved_points of this AssessmentDto.  # noqa: E501

        The amount of points that the student or group achieved with their submission.  # noqa: E501

        :return: The achieved_points of this AssessmentDto.  # noqa: E501
        :rtype: float
        """
        return self._achieved_points

    @achieved_points.setter
    def achieved_points(self, achieved_points):
        """Sets the achieved_points of this AssessmentDto.

        The amount of points that the student or group achieved with their submission.  # noqa: E501

        :param achieved_points: The achieved_points of this AssessmentDto.  # noqa: E501
        :type: float
        """

        self._achieved_points = achieved_points

    @property
    def comment(self):
        """Gets the comment of this AssessmentDto.  # noqa: E501

        A comment providing additional feedback.  # noqa: E501

        :return: The comment of this AssessmentDto.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this AssessmentDto.

        A comment providing additional feedback.  # noqa: E501

        :param comment: The comment of this AssessmentDto.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def group_id(self):
        """Gets the group_id of this AssessmentDto.  # noqa: E501

        If a group submission is being evaluated, contains the identifier of the group.  # noqa: E501

        :return: The group_id of this AssessmentDto.  # noqa: E501
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this AssessmentDto.

        If a group submission is being evaluated, contains the identifier of the group.  # noqa: E501

        :param group_id: The group_id of this AssessmentDto.  # noqa: E501
        :type: str
        """

        self._group_id = group_id

    @property
    def user_id(self):
        """Gets the user_id of this AssessmentDto.  # noqa: E501

        If a single user is being evaluated, contains the identifier of the user.  # noqa: E501

        :return: The user_id of this AssessmentDto.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AssessmentDto.

        If a single user is being evaluated, contains the identifier of the user.  # noqa: E501

        :param user_id: The user_id of this AssessmentDto.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def creator_id(self):
        """Gets the creator_id of this AssessmentDto.  # noqa: E501

        Identifier of the creator of this assessment.  # noqa: E501

        :return: The creator_id of this AssessmentDto.  # noqa: E501
        :rtype: str
        """
        return self._creator_id

    @creator_id.setter
    def creator_id(self, creator_id):
        """Sets the creator_id of this AssessmentDto.

        Identifier of the creator of this assessment.  # noqa: E501

        :param creator_id: The creator_id of this AssessmentDto.  # noqa: E501
        :type: str
        """

        self._creator_id = creator_id

    @property
    def last_updated_by_id(self):
        """Gets the last_updated_by_id of this AssessmentDto.  # noqa: E501

        Identifier of the last user that updated this assessment.  # noqa: E501

        :return: The last_updated_by_id of this AssessmentDto.  # noqa: E501
        :rtype: str
        """
        return self._last_updated_by_id

    @last_updated_by_id.setter
    def last_updated_by_id(self, last_updated_by_id):
        """Sets the last_updated_by_id of this AssessmentDto.

        Identifier of the last user that updated this assessment.  # noqa: E501

        :param last_updated_by_id: The last_updated_by_id of this AssessmentDto.  # noqa: E501
        :type: str
        """

        self._last_updated_by_id = last_updated_by_id

    @property
    def assignment(self):
        """Gets the assignment of this AssessmentDto.  # noqa: E501


        :return: The assignment of this AssessmentDto.  # noqa: E501
        :rtype: AssignmentDto
        """
        return self._assignment

    @assignment.setter
    def assignment(self, assignment):
        """Sets the assignment of this AssessmentDto.


        :param assignment: The assignment of this AssessmentDto.  # noqa: E501
        :type: AssignmentDto
        """

        self._assignment = assignment

    @property
    def group(self):
        """Gets the group of this AssessmentDto.  # noqa: E501


        :return: The group of this AssessmentDto.  # noqa: E501
        :rtype: GroupDto
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this AssessmentDto.


        :param group: The group of this AssessmentDto.  # noqa: E501
        :type: GroupDto
        """

        self._group = group

    @property
    def participant(self):
        """Gets the participant of this AssessmentDto.  # noqa: E501


        :return: The participant of this AssessmentDto.  # noqa: E501
        :rtype: ParticipantDto
        """
        return self._participant

    @participant.setter
    def participant(self, participant):
        """Sets the participant of this AssessmentDto.


        :param participant: The participant of this AssessmentDto.  # noqa: E501
        :type: ParticipantDto
        """

        self._participant = participant

    @property
    def creator(self):
        """Gets the creator of this AssessmentDto.  # noqa: E501


        :return: The creator of this AssessmentDto.  # noqa: E501
        :rtype: UserDto
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this AssessmentDto.


        :param creator: The creator of this AssessmentDto.  # noqa: E501
        :type: UserDto
        """

        self._creator = creator

    @property
    def last_updated_by(self):
        """Gets the last_updated_by of this AssessmentDto.  # noqa: E501


        :return: The last_updated_by of this AssessmentDto.  # noqa: E501
        :rtype: UserDto
        """
        return self._last_updated_by

    @last_updated_by.setter
    def last_updated_by(self, last_updated_by):
        """Sets the last_updated_by of this AssessmentDto.


        :param last_updated_by: The last_updated_by of this AssessmentDto.  # noqa: E501
        :type: UserDto
        """

        self._last_updated_by = last_updated_by

    @property
    def creation_date(self):
        """Gets the creation_date of this AssessmentDto.  # noqa: E501


        :return: The creation_date of this AssessmentDto.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this AssessmentDto.


        :param creation_date: The creation_date of this AssessmentDto.  # noqa: E501
        :type: datetime
        """

        self._creation_date = creation_date

    @property
    def update_date(self):
        """Gets the update_date of this AssessmentDto.  # noqa: E501


        :return: The update_date of this AssessmentDto.  # noqa: E501
        :rtype: datetime
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this AssessmentDto.


        :param update_date: The update_date of this AssessmentDto.  # noqa: E501
        :type: datetime
        """

        self._update_date = update_date

    @property
    def partial_assessments(self):
        """Gets the partial_assessments of this AssessmentDto.  # noqa: E501


        :return: The partial_assessments of this AssessmentDto.  # noqa: E501
        :rtype: list[PartialAssessmentDto]
        """
        return self._partial_assessments

    @partial_assessments.setter
    def partial_assessments(self, partial_assessments):
        """Sets the partial_assessments of this AssessmentDto.


        :param partial_assessments: The partial_assessments of this AssessmentDto.  # noqa: E501
        :type: list[PartialAssessmentDto]
        """

        self._partial_assessments = partial_assessments

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssessmentDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssessmentDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
