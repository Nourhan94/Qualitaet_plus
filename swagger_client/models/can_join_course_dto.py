# coding: utf-8

"""
    Student-Management-System-API

    The Student-Management-System-API. <a href='http://147.172.178.30:8080/stmgmt/api-json'>JSON</a>  # noqa: E501

    OpenAPI spec version: 2.7.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CanJoinCourseDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'can_join': 'bool',
        'requires_password': 'bool',
        'reason': 'str'
    }

    attribute_map = {
        'can_join': 'canJoin',
        'requires_password': 'requiresPassword',
        'reason': 'reason'
    }

    def __init__(self, can_join=None, requires_password=None, reason=None):  # noqa: E501
        """CanJoinCourseDto - a model defined in Swagger"""  # noqa: E501
        self._can_join = None
        self._requires_password = None
        self._reason = None
        self.discriminator = None
        self.can_join = can_join
        if requires_password is not None:
            self.requires_password = requires_password
        if reason is not None:
            self.reason = reason

    @property
    def can_join(self):
        """Gets the can_join of this CanJoinCourseDto.  # noqa: E501

        Indicates, wether the joining the course is possible.  # noqa: E501

        :return: The can_join of this CanJoinCourseDto.  # noqa: E501
        :rtype: bool
        """
        return self._can_join

    @can_join.setter
    def can_join(self, can_join):
        """Sets the can_join of this CanJoinCourseDto.

        Indicates, wether the joining the course is possible.  # noqa: E501

        :param can_join: The can_join of this CanJoinCourseDto.  # noqa: E501
        :type: bool
        """
        if can_join is None:
            raise ValueError("Invalid value for `can_join`, must not be `None`")  # noqa: E501

        self._can_join = can_join

    @property
    def requires_password(self):
        """Gets the requires_password of this CanJoinCourseDto.  # noqa: E501

        Indicates, wether the joining the course requires a password.  # noqa: E501

        :return: The requires_password of this CanJoinCourseDto.  # noqa: E501
        :rtype: bool
        """
        return self._requires_password

    @requires_password.setter
    def requires_password(self, requires_password):
        """Sets the requires_password of this CanJoinCourseDto.

        Indicates, wether the joining the course requires a password.  # noqa: E501

        :param requires_password: The requires_password of this CanJoinCourseDto.  # noqa: E501
        :type: bool
        """

        self._requires_password = requires_password

    @property
    def reason(self):
        """Gets the reason of this CanJoinCourseDto.  # noqa: E501

        The reason why joining the course is not possible.  # noqa: E501

        :return: The reason of this CanJoinCourseDto.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this CanJoinCourseDto.

        The reason why joining the course is not possible.  # noqa: E501

        :param reason: The reason of this CanJoinCourseDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["CLOSED", "IS_MEMBER"]  # noqa: E501
        if reason not in allowed_values:
            raise ValueError(
                "Invalid value for `reason` ({0}), must be one of {1}"  # noqa: E501
                .format(reason, allowed_values)
            )

        self._reason = reason

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CanJoinCourseDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CanJoinCourseDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
