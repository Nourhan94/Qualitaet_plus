# coding: utf-8

"""
    Student-Management-System-API

    The Student-Management-System-API. <a href='http://147.172.178.30:8080/stmgmt/api-json'>JSON</a>  # noqa: E501

    OpenAPI spec version: 2.7.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CourseConfigDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'float',
        'password': 'str',
        'group_settings': 'GroupSettingsDto',
        'admission_criteria': 'AdmissionCriteriaDto'
    }

    attribute_map = {
        'id': 'id',
        'password': 'password',
        'group_settings': 'groupSettings',
        'admission_criteria': 'admissionCriteria'
    }

    def __init__(self, id=None, password=None, group_settings=None, admission_criteria=None):  # noqa: E501
        """CourseConfigDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._password = None
        self._group_settings = None
        self._admission_criteria = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if password is not None:
            self.password = password
        if group_settings is not None:
            self.group_settings = group_settings
        if admission_criteria is not None:
            self.admission_criteria = admission_criteria

    @property
    def id(self):
        """Gets the id of this CourseConfigDto.  # noqa: E501

        Unique identifier of the configuration.  # noqa: E501

        :return: The id of this CourseConfigDto.  # noqa: E501
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CourseConfigDto.

        Unique identifier of the configuration.  # noqa: E501

        :param id: The id of this CourseConfigDto.  # noqa: E501
        :type: float
        """

        self._id = id

    @property
    def password(self):
        """Gets the password of this CourseConfigDto.  # noqa: E501

        Password required to sign up for the course.  # noqa: E501

        :return: The password of this CourseConfigDto.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this CourseConfigDto.

        Password required to sign up for the course.  # noqa: E501

        :param password: The password of this CourseConfigDto.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def group_settings(self):
        """Gets the group_settings of this CourseConfigDto.  # noqa: E501


        :return: The group_settings of this CourseConfigDto.  # noqa: E501
        :rtype: GroupSettingsDto
        """
        return self._group_settings

    @group_settings.setter
    def group_settings(self, group_settings):
        """Sets the group_settings of this CourseConfigDto.


        :param group_settings: The group_settings of this CourseConfigDto.  # noqa: E501
        :type: GroupSettingsDto
        """

        self._group_settings = group_settings

    @property
    def admission_criteria(self):
        """Gets the admission_criteria of this CourseConfigDto.  # noqa: E501


        :return: The admission_criteria of this CourseConfigDto.  # noqa: E501
        :rtype: AdmissionCriteriaDto
        """
        return self._admission_criteria

    @admission_criteria.setter
    def admission_criteria(self, admission_criteria):
        """Sets the admission_criteria of this CourseConfigDto.


        :param admission_criteria: The admission_criteria of this CourseConfigDto.  # noqa: E501
        :type: AdmissionCriteriaDto
        """

        self._admission_criteria = admission_criteria

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CourseConfigDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CourseConfigDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
