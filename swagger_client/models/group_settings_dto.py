# coding: utf-8

"""
    Student-Management-System-API

    The Student-Management-System-API. <a href='http://147.172.178.30:8080/stmgmt/api-json'>JSON</a>  # noqa: E501

    OpenAPI spec version: 2.7.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GroupSettingsDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allow_groups': 'bool',
        'name_schema': 'str',
        'size_min': 'float',
        'size_max': 'float',
        'selfmanaged': 'bool',
        'auto_join_group_on_course_joined': 'bool',
        'merge_groups_on_assignment_started': 'bool'
    }

    attribute_map = {
        'allow_groups': 'allowGroups',
        'name_schema': 'nameSchema',
        'size_min': 'sizeMin',
        'size_max': 'sizeMax',
        'selfmanaged': 'selfmanaged',
        'auto_join_group_on_course_joined': 'autoJoinGroupOnCourseJoined',
        'merge_groups_on_assignment_started': 'mergeGroupsOnAssignmentStarted'
    }

    def __init__(self, allow_groups=None, name_schema=None, size_min=None, size_max=None, selfmanaged=None, auto_join_group_on_course_joined=None, merge_groups_on_assignment_started=None):  # noqa: E501
        """GroupSettingsDto - a model defined in Swagger"""  # noqa: E501
        self._allow_groups = None
        self._name_schema = None
        self._size_min = None
        self._size_max = None
        self._selfmanaged = None
        self._auto_join_group_on_course_joined = None
        self._merge_groups_on_assignment_started = None
        self.discriminator = None
        self.allow_groups = allow_groups
        if name_schema is not None:
            self.name_schema = name_schema
        self.size_min = size_min
        self.size_max = size_max
        self.selfmanaged = selfmanaged
        self.auto_join_group_on_course_joined = auto_join_group_on_course_joined
        self.merge_groups_on_assignment_started = merge_groups_on_assignment_started

    @property
    def allow_groups(self):
        """Gets the allow_groups of this GroupSettingsDto.  # noqa: E501

        Determines, wether course allows group creation.  # noqa: E501

        :return: The allow_groups of this GroupSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._allow_groups

    @allow_groups.setter
    def allow_groups(self, allow_groups):
        """Sets the allow_groups of this GroupSettingsDto.

        Determines, wether course allows group creation.  # noqa: E501

        :param allow_groups: The allow_groups of this GroupSettingsDto.  # noqa: E501
        :type: bool
        """
        if allow_groups is None:
            raise ValueError("Invalid value for `allow_groups`, must not be `None`")  # noqa: E501

        self._allow_groups = allow_groups

    @property
    def name_schema(self):
        """Gets the name_schema of this GroupSettingsDto.  # noqa: E501

        If utilized, all group names will use the nameSchema followed by the group's number.  # noqa: E501

        :return: The name_schema of this GroupSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._name_schema

    @name_schema.setter
    def name_schema(self, name_schema):
        """Sets the name_schema of this GroupSettingsDto.

        If utilized, all group names will use the nameSchema followed by the group's number.  # noqa: E501

        :param name_schema: The name_schema of this GroupSettingsDto.  # noqa: E501
        :type: str
        """

        self._name_schema = name_schema

    @property
    def size_min(self):
        """Gets the size_min of this GroupSettingsDto.  # noqa: E501

        The required amount of members the group needs in order to submit group-assignments.  # noqa: E501

        :return: The size_min of this GroupSettingsDto.  # noqa: E501
        :rtype: float
        """
        return self._size_min

    @size_min.setter
    def size_min(self, size_min):
        """Sets the size_min of this GroupSettingsDto.

        The required amount of members the group needs in order to submit group-assignments.  # noqa: E501

        :param size_min: The size_min of this GroupSettingsDto.  # noqa: E501
        :type: float
        """
        if size_min is None:
            raise ValueError("Invalid value for `size_min`, must not be `None`")  # noqa: E501

        self._size_min = size_min

    @property
    def size_max(self):
        """Gets the size_max of this GroupSettingsDto.  # noqa: E501

        The maximum amount of members in a group.  # noqa: E501

        :return: The size_max of this GroupSettingsDto.  # noqa: E501
        :rtype: float
        """
        return self._size_max

    @size_max.setter
    def size_max(self, size_max):
        """Sets the size_max of this GroupSettingsDto.

        The maximum amount of members in a group.  # noqa: E501

        :param size_max: The size_max of this GroupSettingsDto.  # noqa: E501
        :type: float
        """
        if size_max is None:
            raise ValueError("Invalid value for `size_max`, must not be `None`")  # noqa: E501

        self._size_max = size_max

    @property
    def selfmanaged(self):
        """Gets the selfmanaged of this GroupSettingsDto.  # noqa: E501

        Indicates, wether the group is managed by its members.  # noqa: E501

        :return: The selfmanaged of this GroupSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._selfmanaged

    @selfmanaged.setter
    def selfmanaged(self, selfmanaged):
        """Sets the selfmanaged of this GroupSettingsDto.

        Indicates, wether the group is managed by its members.  # noqa: E501

        :param selfmanaged: The selfmanaged of this GroupSettingsDto.  # noqa: E501
        :type: bool
        """
        if selfmanaged is None:
            raise ValueError("Invalid value for `selfmanaged`, must not be `None`")  # noqa: E501

        self._selfmanaged = selfmanaged

    @property
    def auto_join_group_on_course_joined(self):
        """Gets the auto_join_group_on_course_joined of this GroupSettingsDto.  # noqa: E501

        If enabled, participants that join the course will automatically join a group.  # noqa: E501

        :return: The auto_join_group_on_course_joined of this GroupSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._auto_join_group_on_course_joined

    @auto_join_group_on_course_joined.setter
    def auto_join_group_on_course_joined(self, auto_join_group_on_course_joined):
        """Sets the auto_join_group_on_course_joined of this GroupSettingsDto.

        If enabled, participants that join the course will automatically join a group.  # noqa: E501

        :param auto_join_group_on_course_joined: The auto_join_group_on_course_joined of this GroupSettingsDto.  # noqa: E501
        :type: bool
        """
        if auto_join_group_on_course_joined is None:
            raise ValueError("Invalid value for `auto_join_group_on_course_joined`, must not be `None`")  # noqa: E501

        self._auto_join_group_on_course_joined = auto_join_group_on_course_joined

    @property
    def merge_groups_on_assignment_started(self):
        """Gets the merge_groups_on_assignment_started of this GroupSettingsDto.  # noqa: E501

        If enabled, groups that don't have enough members will be merged when an assignment starts.  # noqa: E501

        :return: The merge_groups_on_assignment_started of this GroupSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._merge_groups_on_assignment_started

    @merge_groups_on_assignment_started.setter
    def merge_groups_on_assignment_started(self, merge_groups_on_assignment_started):
        """Sets the merge_groups_on_assignment_started of this GroupSettingsDto.

        If enabled, groups that don't have enough members will be merged when an assignment starts.  # noqa: E501

        :param merge_groups_on_assignment_started: The merge_groups_on_assignment_started of this GroupSettingsDto.  # noqa: E501
        :type: bool
        """
        if merge_groups_on_assignment_started is None:
            raise ValueError("Invalid value for `merge_groups_on_assignment_started`, must not be `None`")  # noqa: E501

        self._merge_groups_on_assignment_started = merge_groups_on_assignment_started

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GroupSettingsDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GroupSettingsDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
