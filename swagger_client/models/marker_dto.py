# coding: utf-8

"""
    Student-Management-System-API

    The Student-Management-System-API. <a href='http://147.172.178.30:8080/stmgmt/api-json'>JSON</a>  # noqa: E501

    OpenAPI spec version: 2.7.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MarkerDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'path': 'str',
        'start_line_number': 'float',
        'end_line_number': 'float',
        'start_column': 'float',
        'end_column': 'float',
        'severity': 'str',
        'comment': 'str',
        'points': 'float'
    }

    attribute_map = {
        'path': 'path',
        'start_line_number': 'startLineNumber',
        'end_line_number': 'endLineNumber',
        'start_column': 'startColumn',
        'end_column': 'endColumn',
        'severity': 'severity',
        'comment': 'comment',
        'points': 'points'
    }

    def __init__(self, path=None, start_line_number=None, end_line_number=None, start_column=None, end_column=None, severity=None, comment=None, points=None):  # noqa: E501
        """MarkerDto - a model defined in Swagger"""  # noqa: E501
        self._path = None
        self._start_line_number = None
        self._end_line_number = None
        self._start_column = None
        self._end_column = None
        self._severity = None
        self._comment = None
        self._points = None
        self.discriminator = None
        self.path = path
        self.start_line_number = start_line_number
        self.end_line_number = end_line_number
        if start_column is not None:
            self.start_column = start_column
        if end_column is not None:
            self.end_column = end_column
        self.severity = severity
        self.comment = comment
        if points is not None:
            self.points = points

    @property
    def path(self):
        """Gets the path of this MarkerDto.  # noqa: E501


        :return: The path of this MarkerDto.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this MarkerDto.


        :param path: The path of this MarkerDto.  # noqa: E501
        :type: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501

        self._path = path

    @property
    def start_line_number(self):
        """Gets the start_line_number of this MarkerDto.  # noqa: E501


        :return: The start_line_number of this MarkerDto.  # noqa: E501
        :rtype: float
        """
        return self._start_line_number

    @start_line_number.setter
    def start_line_number(self, start_line_number):
        """Sets the start_line_number of this MarkerDto.


        :param start_line_number: The start_line_number of this MarkerDto.  # noqa: E501
        :type: float
        """
        if start_line_number is None:
            raise ValueError("Invalid value for `start_line_number`, must not be `None`")  # noqa: E501

        self._start_line_number = start_line_number

    @property
    def end_line_number(self):
        """Gets the end_line_number of this MarkerDto.  # noqa: E501


        :return: The end_line_number of this MarkerDto.  # noqa: E501
        :rtype: float
        """
        return self._end_line_number

    @end_line_number.setter
    def end_line_number(self, end_line_number):
        """Sets the end_line_number of this MarkerDto.


        :param end_line_number: The end_line_number of this MarkerDto.  # noqa: E501
        :type: float
        """
        if end_line_number is None:
            raise ValueError("Invalid value for `end_line_number`, must not be `None`")  # noqa: E501

        self._end_line_number = end_line_number

    @property
    def start_column(self):
        """Gets the start_column of this MarkerDto.  # noqa: E501


        :return: The start_column of this MarkerDto.  # noqa: E501
        :rtype: float
        """
        return self._start_column

    @start_column.setter
    def start_column(self, start_column):
        """Sets the start_column of this MarkerDto.


        :param start_column: The start_column of this MarkerDto.  # noqa: E501
        :type: float
        """

        self._start_column = start_column

    @property
    def end_column(self):
        """Gets the end_column of this MarkerDto.  # noqa: E501


        :return: The end_column of this MarkerDto.  # noqa: E501
        :rtype: float
        """
        return self._end_column

    @end_column.setter
    def end_column(self, end_column):
        """Sets the end_column of this MarkerDto.


        :param end_column: The end_column of this MarkerDto.  # noqa: E501
        :type: float
        """

        self._end_column = end_column

    @property
    def severity(self):
        """Gets the severity of this MarkerDto.  # noqa: E501


        :return: The severity of this MarkerDto.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this MarkerDto.


        :param severity: The severity of this MarkerDto.  # noqa: E501
        :type: str
        """
        if severity is None:
            raise ValueError("Invalid value for `severity`, must not be `None`")  # noqa: E501
        allowed_values = ["INFO", "HINT", "WARNING", "ERROR"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"  # noqa: E501
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def comment(self):
        """Gets the comment of this MarkerDto.  # noqa: E501


        :return: The comment of this MarkerDto.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this MarkerDto.


        :param comment: The comment of this MarkerDto.  # noqa: E501
        :type: str
        """
        if comment is None:
            raise ValueError("Invalid value for `comment`, must not be `None`")  # noqa: E501

        self._comment = comment

    @property
    def points(self):
        """Gets the points of this MarkerDto.  # noqa: E501


        :return: The points of this MarkerDto.  # noqa: E501
        :rtype: float
        """
        return self._points

    @points.setter
    def points(self, points):
        """Sets the points of this MarkerDto.


        :param points: The points of this MarkerDto.  # noqa: E501
        :type: float
        """

        self._points = points

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MarkerDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MarkerDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
