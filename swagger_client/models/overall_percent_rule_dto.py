# coding: utf-8

"""
    Student-Management-System-API

    The Student-Management-System-API. <a href='http://147.172.178.30:8080/stmgmt/api-json'>JSON</a>  # noqa: E501

    OpenAPI spec version: 2.7.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OverallPercentRuleDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'assignment_type': 'str',
        'required_percent': 'float',
        'achieved_percent_rounding': 'RoundingBehavior'
    }

    attribute_map = {
        'type': 'type',
        'assignment_type': 'assignmentType',
        'required_percent': 'requiredPercent',
        'achieved_percent_rounding': 'achievedPercentRounding'
    }

    def __init__(self, type='REQUIRED_PERCENT_OVERALL', assignment_type=None, required_percent=None, achieved_percent_rounding=None):  # noqa: E501
        """OverallPercentRuleDto - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._assignment_type = None
        self._required_percent = None
        self._achieved_percent_rounding = None
        self.discriminator = None
        self.type = type
        self.assignment_type = assignment_type
        self.required_percent = required_percent
        self.achieved_percent_rounding = achieved_percent_rounding

    @property
    def type(self):
        """Gets the type of this OverallPercentRuleDto.  # noqa: E501


        :return: The type of this OverallPercentRuleDto.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OverallPercentRuleDto.


        :param type: The type of this OverallPercentRuleDto.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["INDIVIDUAL_PERCENT_WITH_ALLOWED_FAILURES", "REQUIRED_PERCENT_OVERALL"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def assignment_type(self):
        """Gets the assignment_type of this OverallPercentRuleDto.  # noqa: E501


        :return: The assignment_type of this OverallPercentRuleDto.  # noqa: E501
        :rtype: str
        """
        return self._assignment_type

    @assignment_type.setter
    def assignment_type(self, assignment_type):
        """Sets the assignment_type of this OverallPercentRuleDto.


        :param assignment_type: The assignment_type of this OverallPercentRuleDto.  # noqa: E501
        :type: str
        """
        if assignment_type is None:
            raise ValueError("Invalid value for `assignment_type`, must not be `None`")  # noqa: E501
        allowed_values = ["HOMEWORK", "TESTAT", "SEMINAR", "PROJECT", "OTHER"]  # noqa: E501
        if assignment_type not in allowed_values:
            raise ValueError(
                "Invalid value for `assignment_type` ({0}), must be one of {1}"  # noqa: E501
                .format(assignment_type, allowed_values)
            )

        self._assignment_type = assignment_type

    @property
    def required_percent(self):
        """Gets the required_percent of this OverallPercentRuleDto.  # noqa: E501


        :return: The required_percent of this OverallPercentRuleDto.  # noqa: E501
        :rtype: float
        """
        return self._required_percent

    @required_percent.setter
    def required_percent(self, required_percent):
        """Sets the required_percent of this OverallPercentRuleDto.


        :param required_percent: The required_percent of this OverallPercentRuleDto.  # noqa: E501
        :type: float
        """
        if required_percent is None:
            raise ValueError("Invalid value for `required_percent`, must not be `None`")  # noqa: E501

        self._required_percent = required_percent

    @property
    def achieved_percent_rounding(self):
        """Gets the achieved_percent_rounding of this OverallPercentRuleDto.  # noqa: E501


        :return: The achieved_percent_rounding of this OverallPercentRuleDto.  # noqa: E501
        :rtype: RoundingBehavior
        """
        return self._achieved_percent_rounding

    @achieved_percent_rounding.setter
    def achieved_percent_rounding(self, achieved_percent_rounding):
        """Sets the achieved_percent_rounding of this OverallPercentRuleDto.


        :param achieved_percent_rounding: The achieved_percent_rounding of this OverallPercentRuleDto.  # noqa: E501
        :type: RoundingBehavior
        """
        if achieved_percent_rounding is None:
            raise ValueError("Invalid value for `achieved_percent_rounding`, must not be `None`")  # noqa: E501

        self._achieved_percent_rounding = achieved_percent_rounding

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OverallPercentRuleDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OverallPercentRuleDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
