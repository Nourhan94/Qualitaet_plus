# coding: utf-8

"""
    Student-Management-System-API

    The Student-Management-System-API. <a href='http://147.172.178.30:8080/stmgmt/api-json'>JSON</a>  # noqa: E501

    OpenAPI spec version: 2.7.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PartialAssessmentDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'str',
        'title': 'str',
        'draft_only': 'bool',
        'comment': 'str',
        'points': 'float',
        'markers': 'list[MarkerDto]'
    }

    attribute_map = {
        'key': 'key',
        'title': 'title',
        'draft_only': 'draftOnly',
        'comment': 'comment',
        'points': 'points',
        'markers': 'markers'
    }

    def __init__(self, key=None, title=None, draft_only=None, comment=None, points=None, markers=None):  # noqa: E501
        """PartialAssessmentDto - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._title = None
        self._draft_only = None
        self._comment = None
        self._points = None
        self._markers = None
        self.discriminator = None
        if key is not None:
            self.key = key
        self.title = title
        self.draft_only = draft_only
        if comment is not None:
            self.comment = comment
        if points is not None:
            self.points = points
        if markers is not None:
            self.markers = markers

    @property
    def key(self):
        """Gets the key of this PartialAssessmentDto.  # noqa: E501


        :return: The key of this PartialAssessmentDto.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this PartialAssessmentDto.


        :param key: The key of this PartialAssessmentDto.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def title(self):
        """Gets the title of this PartialAssessmentDto.  # noqa: E501


        :return: The title of this PartialAssessmentDto.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this PartialAssessmentDto.


        :param title: The title of this PartialAssessmentDto.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def draft_only(self):
        """Gets the draft_only of this PartialAssessmentDto.  # noqa: E501


        :return: The draft_only of this PartialAssessmentDto.  # noqa: E501
        :rtype: bool
        """
        return self._draft_only

    @draft_only.setter
    def draft_only(self, draft_only):
        """Sets the draft_only of this PartialAssessmentDto.


        :param draft_only: The draft_only of this PartialAssessmentDto.  # noqa: E501
        :type: bool
        """
        if draft_only is None:
            raise ValueError("Invalid value for `draft_only`, must not be `None`")  # noqa: E501

        self._draft_only = draft_only

    @property
    def comment(self):
        """Gets the comment of this PartialAssessmentDto.  # noqa: E501


        :return: The comment of this PartialAssessmentDto.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this PartialAssessmentDto.


        :param comment: The comment of this PartialAssessmentDto.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def points(self):
        """Gets the points of this PartialAssessmentDto.  # noqa: E501


        :return: The points of this PartialAssessmentDto.  # noqa: E501
        :rtype: float
        """
        return self._points

    @points.setter
    def points(self, points):
        """Sets the points of this PartialAssessmentDto.


        :param points: The points of this PartialAssessmentDto.  # noqa: E501
        :type: float
        """

        self._points = points

    @property
    def markers(self):
        """Gets the markers of this PartialAssessmentDto.  # noqa: E501


        :return: The markers of this PartialAssessmentDto.  # noqa: E501
        :rtype: list[MarkerDto]
        """
        return self._markers

    @markers.setter
    def markers(self, markers):
        """Sets the markers of this PartialAssessmentDto.


        :param markers: The markers of this PartialAssessmentDto.  # noqa: E501
        :type: list[MarkerDto]
        """

        self._markers = markers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PartialAssessmentDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PartialAssessmentDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
