# coding: utf-8

"""
    Student-Management-System-API

    The Student-Management-System-API. <a href='http://147.172.178.30:8080/stmgmt/api-json'>JSON</a>  # noqa: E501

    OpenAPI spec version: 2.7.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RExportDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'students': 'list[RExportStudent]',
        'groups': 'list[RExportGroup]',
        'assignments': 'list[AssignmentDto]',
        'groups_for_assignment': 'list[RExportRegisteredGroups]',
        'course': 'CourseDto'
    }

    attribute_map = {
        'students': 'students',
        'groups': 'groups',
        'assignments': 'assignments',
        'groups_for_assignment': 'groupsForAssignment',
        'course': 'course'
    }

    def __init__(self, students=None, groups=None, assignments=None, groups_for_assignment=None, course=None):  # noqa: E501
        """RExportDto - a model defined in Swagger"""  # noqa: E501
        self._students = None
        self._groups = None
        self._assignments = None
        self._groups_for_assignment = None
        self._course = None
        self.discriminator = None
        self.students = students
        self.groups = groups
        self.assignments = assignments
        self.groups_for_assignment = groups_for_assignment
        self.course = course

    @property
    def students(self):
        """Gets the students of this RExportDto.  # noqa: E501


        :return: The students of this RExportDto.  # noqa: E501
        :rtype: list[RExportStudent]
        """
        return self._students

    @students.setter
    def students(self, students):
        """Sets the students of this RExportDto.


        :param students: The students of this RExportDto.  # noqa: E501
        :type: list[RExportStudent]
        """
        if students is None:
            raise ValueError("Invalid value for `students`, must not be `None`")  # noqa: E501

        self._students = students

    @property
    def groups(self):
        """Gets the groups of this RExportDto.  # noqa: E501


        :return: The groups of this RExportDto.  # noqa: E501
        :rtype: list[RExportGroup]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this RExportDto.


        :param groups: The groups of this RExportDto.  # noqa: E501
        :type: list[RExportGroup]
        """
        if groups is None:
            raise ValueError("Invalid value for `groups`, must not be `None`")  # noqa: E501

        self._groups = groups

    @property
    def assignments(self):
        """Gets the assignments of this RExportDto.  # noqa: E501


        :return: The assignments of this RExportDto.  # noqa: E501
        :rtype: list[AssignmentDto]
        """
        return self._assignments

    @assignments.setter
    def assignments(self, assignments):
        """Sets the assignments of this RExportDto.


        :param assignments: The assignments of this RExportDto.  # noqa: E501
        :type: list[AssignmentDto]
        """
        if assignments is None:
            raise ValueError("Invalid value for `assignments`, must not be `None`")  # noqa: E501

        self._assignments = assignments

    @property
    def groups_for_assignment(self):
        """Gets the groups_for_assignment of this RExportDto.  # noqa: E501


        :return: The groups_for_assignment of this RExportDto.  # noqa: E501
        :rtype: list[RExportRegisteredGroups]
        """
        return self._groups_for_assignment

    @groups_for_assignment.setter
    def groups_for_assignment(self, groups_for_assignment):
        """Sets the groups_for_assignment of this RExportDto.


        :param groups_for_assignment: The groups_for_assignment of this RExportDto.  # noqa: E501
        :type: list[RExportRegisteredGroups]
        """
        if groups_for_assignment is None:
            raise ValueError("Invalid value for `groups_for_assignment`, must not be `None`")  # noqa: E501

        self._groups_for_assignment = groups_for_assignment

    @property
    def course(self):
        """Gets the course of this RExportDto.  # noqa: E501


        :return: The course of this RExportDto.  # noqa: E501
        :rtype: CourseDto
        """
        return self._course

    @course.setter
    def course(self, course):
        """Sets the course of this RExportDto.


        :param course: The course of this RExportDto.  # noqa: E501
        :type: CourseDto
        """
        if course is None:
            raise ValueError("Invalid value for `course`, must not be `None`")  # noqa: E501

        self._course = course

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RExportDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RExportDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
