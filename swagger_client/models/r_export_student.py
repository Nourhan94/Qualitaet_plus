# coding: utf-8

"""
    Student-Management-System-API

    The Student-Management-System-API. <a href='http://147.172.178.30:8080/stmgmt/api-json'>JSON</a>  # noqa: E501

    OpenAPI spec version: 2.7.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RExportStudent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_info': 'RExportUserInfo',
        'activity': 'list[datetime]',
        'submissions': 'list[RExportSubmission]',
        'admission_status': 'RExportAdmissionStatus',
        'grades': 'list[RExportGrade]'
    }

    attribute_map = {
        'user_info': 'userInfo',
        'activity': 'activity',
        'submissions': 'submissions',
        'admission_status': 'admissionStatus',
        'grades': 'grades'
    }

    def __init__(self, user_info=None, activity=None, submissions=None, admission_status=None, grades=None):  # noqa: E501
        """RExportStudent - a model defined in Swagger"""  # noqa: E501
        self._user_info = None
        self._activity = None
        self._submissions = None
        self._admission_status = None
        self._grades = None
        self.discriminator = None
        self.user_info = user_info
        self.activity = activity
        self.submissions = submissions
        self.admission_status = admission_status
        self.grades = grades

    @property
    def user_info(self):
        """Gets the user_info of this RExportStudent.  # noqa: E501


        :return: The user_info of this RExportStudent.  # noqa: E501
        :rtype: RExportUserInfo
        """
        return self._user_info

    @user_info.setter
    def user_info(self, user_info):
        """Sets the user_info of this RExportStudent.


        :param user_info: The user_info of this RExportStudent.  # noqa: E501
        :type: RExportUserInfo
        """
        if user_info is None:
            raise ValueError("Invalid value for `user_info`, must not be `None`")  # noqa: E501

        self._user_info = user_info

    @property
    def activity(self):
        """Gets the activity of this RExportStudent.  # noqa: E501


        :return: The activity of this RExportStudent.  # noqa: E501
        :rtype: list[datetime]
        """
        return self._activity

    @activity.setter
    def activity(self, activity):
        """Sets the activity of this RExportStudent.


        :param activity: The activity of this RExportStudent.  # noqa: E501
        :type: list[datetime]
        """
        if activity is None:
            raise ValueError("Invalid value for `activity`, must not be `None`")  # noqa: E501

        self._activity = activity

    @property
    def submissions(self):
        """Gets the submissions of this RExportStudent.  # noqa: E501


        :return: The submissions of this RExportStudent.  # noqa: E501
        :rtype: list[RExportSubmission]
        """
        return self._submissions

    @submissions.setter
    def submissions(self, submissions):
        """Sets the submissions of this RExportStudent.


        :param submissions: The submissions of this RExportStudent.  # noqa: E501
        :type: list[RExportSubmission]
        """
        if submissions is None:
            raise ValueError("Invalid value for `submissions`, must not be `None`")  # noqa: E501

        self._submissions = submissions

    @property
    def admission_status(self):
        """Gets the admission_status of this RExportStudent.  # noqa: E501


        :return: The admission_status of this RExportStudent.  # noqa: E501
        :rtype: RExportAdmissionStatus
        """
        return self._admission_status

    @admission_status.setter
    def admission_status(self, admission_status):
        """Sets the admission_status of this RExportStudent.


        :param admission_status: The admission_status of this RExportStudent.  # noqa: E501
        :type: RExportAdmissionStatus
        """
        if admission_status is None:
            raise ValueError("Invalid value for `admission_status`, must not be `None`")  # noqa: E501

        self._admission_status = admission_status

    @property
    def grades(self):
        """Gets the grades of this RExportStudent.  # noqa: E501


        :return: The grades of this RExportStudent.  # noqa: E501
        :rtype: list[RExportGrade]
        """
        return self._grades

    @grades.setter
    def grades(self, grades):
        """Sets the grades of this RExportStudent.


        :param grades: The grades of this RExportStudent.  # noqa: E501
        :type: list[RExportGrade]
        """
        if grades is None:
            raise ValueError("Invalid value for `grades`, must not be `None`")  # noqa: E501

        self._grades = grades

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RExportStudent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RExportStudent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
