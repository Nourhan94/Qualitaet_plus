# coding: utf-8

"""
    Student-Management-System-API

    The Student-Management-System-API. <a href='http://147.172.178.30:8080/stmgmt/api-json'>JSON</a>  # noqa: E501

    OpenAPI spec version: 2.7.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RuleCheckResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'passed': 'bool',
        'achieved_points': 'float',
        'achieved_percent': 'float',
        'comment': 'str',
        'rule': 'str',
        'assignment_type': 'str'
    }

    attribute_map = {
        'passed': 'passed',
        'achieved_points': 'achievedPoints',
        'achieved_percent': 'achievedPercent',
        'comment': 'comment',
        'rule': '_rule',
        'assignment_type': '_assignmentType'
    }

    def __init__(self, passed=None, achieved_points=None, achieved_percent=None, comment=None, rule=None, assignment_type=None):  # noqa: E501
        """RuleCheckResult - a model defined in Swagger"""  # noqa: E501
        self._passed = None
        self._achieved_points = None
        self._achieved_percent = None
        self._comment = None
        self._rule = None
        self._assignment_type = None
        self.discriminator = None
        self.passed = passed
        self.achieved_points = achieved_points
        self.achieved_percent = achieved_percent
        if comment is not None:
            self.comment = comment
        self.rule = rule
        self.assignment_type = assignment_type

    @property
    def passed(self):
        """Gets the passed of this RuleCheckResult.  # noqa: E501


        :return: The passed of this RuleCheckResult.  # noqa: E501
        :rtype: bool
        """
        return self._passed

    @passed.setter
    def passed(self, passed):
        """Sets the passed of this RuleCheckResult.


        :param passed: The passed of this RuleCheckResult.  # noqa: E501
        :type: bool
        """
        if passed is None:
            raise ValueError("Invalid value for `passed`, must not be `None`")  # noqa: E501

        self._passed = passed

    @property
    def achieved_points(self):
        """Gets the achieved_points of this RuleCheckResult.  # noqa: E501


        :return: The achieved_points of this RuleCheckResult.  # noqa: E501
        :rtype: float
        """
        return self._achieved_points

    @achieved_points.setter
    def achieved_points(self, achieved_points):
        """Sets the achieved_points of this RuleCheckResult.


        :param achieved_points: The achieved_points of this RuleCheckResult.  # noqa: E501
        :type: float
        """
        if achieved_points is None:
            raise ValueError("Invalid value for `achieved_points`, must not be `None`")  # noqa: E501

        self._achieved_points = achieved_points

    @property
    def achieved_percent(self):
        """Gets the achieved_percent of this RuleCheckResult.  # noqa: E501


        :return: The achieved_percent of this RuleCheckResult.  # noqa: E501
        :rtype: float
        """
        return self._achieved_percent

    @achieved_percent.setter
    def achieved_percent(self, achieved_percent):
        """Sets the achieved_percent of this RuleCheckResult.


        :param achieved_percent: The achieved_percent of this RuleCheckResult.  # noqa: E501
        :type: float
        """
        if achieved_percent is None:
            raise ValueError("Invalid value for `achieved_percent`, must not be `None`")  # noqa: E501

        self._achieved_percent = achieved_percent

    @property
    def comment(self):
        """Gets the comment of this RuleCheckResult.  # noqa: E501


        :return: The comment of this RuleCheckResult.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this RuleCheckResult.


        :param comment: The comment of this RuleCheckResult.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def rule(self):
        """Gets the rule of this RuleCheckResult.  # noqa: E501


        :return: The rule of this RuleCheckResult.  # noqa: E501
        :rtype: str
        """
        return self._rule

    @rule.setter
    def rule(self, rule):
        """Sets the rule of this RuleCheckResult.


        :param rule: The rule of this RuleCheckResult.  # noqa: E501
        :type: str
        """
        if rule is None:
            raise ValueError("Invalid value for `rule`, must not be `None`")  # noqa: E501
        allowed_values = ["INDIVIDUAL_PERCENT_WITH_ALLOWED_FAILURES", "REQUIRED_PERCENT_OVERALL"]  # noqa: E501
        if rule not in allowed_values:
            raise ValueError(
                "Invalid value for `rule` ({0}), must be one of {1}"  # noqa: E501
                .format(rule, allowed_values)
            )

        self._rule = rule

    @property
    def assignment_type(self):
        """Gets the assignment_type of this RuleCheckResult.  # noqa: E501


        :return: The assignment_type of this RuleCheckResult.  # noqa: E501
        :rtype: str
        """
        return self._assignment_type

    @assignment_type.setter
    def assignment_type(self, assignment_type):
        """Sets the assignment_type of this RuleCheckResult.


        :param assignment_type: The assignment_type of this RuleCheckResult.  # noqa: E501
        :type: str
        """
        if assignment_type is None:
            raise ValueError("Invalid value for `assignment_type`, must not be `None`")  # noqa: E501
        allowed_values = ["HOMEWORK", "TESTAT", "SEMINAR", "PROJECT", "OTHER"]  # noqa: E501
        if assignment_type not in allowed_values:
            raise ValueError(
                "Invalid value for `assignment_type` ({0}), must be one of {1}"  # noqa: E501
                .format(assignment_type, allowed_values)
            )

        self._assignment_type = assignment_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RuleCheckResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RuleCheckResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
