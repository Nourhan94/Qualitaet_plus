# coding: utf-8

"""
    Student-Management-System-API

    The Student-Management-System-API. <a href='http://147.172.178.30:8080/stmgmt/api-json'>JSON</a>  # noqa: E501

    OpenAPI spec version: 2.7.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StudentResults(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'student': 'ParticipantDto',
        'achieved_points': 'list[float]',
        'assessment_ids': 'list[str]'
    }

    attribute_map = {
        'student': 'student',
        'achieved_points': 'achievedPoints',
        'assessment_ids': 'assessmentIds'
    }

    def __init__(self, student=None, achieved_points=None, assessment_ids=None):  # noqa: E501
        """StudentResults - a model defined in Swagger"""  # noqa: E501
        self._student = None
        self._achieved_points = None
        self._assessment_ids = None
        self.discriminator = None
        self.student = student
        self.achieved_points = achieved_points
        self.assessment_ids = assessment_ids

    @property
    def student(self):
        """Gets the student of this StudentResults.  # noqa: E501


        :return: The student of this StudentResults.  # noqa: E501
        :rtype: ParticipantDto
        """
        return self._student

    @student.setter
    def student(self, student):
        """Sets the student of this StudentResults.


        :param student: The student of this StudentResults.  # noqa: E501
        :type: ParticipantDto
        """
        if student is None:
            raise ValueError("Invalid value for `student`, must not be `None`")  # noqa: E501

        self._student = student

    @property
    def achieved_points(self):
        """Gets the achieved_points of this StudentResults.  # noqa: E501


        :return: The achieved_points of this StudentResults.  # noqa: E501
        :rtype: list[float]
        """
        return self._achieved_points

    @achieved_points.setter
    def achieved_points(self, achieved_points):
        """Sets the achieved_points of this StudentResults.


        :param achieved_points: The achieved_points of this StudentResults.  # noqa: E501
        :type: list[float]
        """
        if achieved_points is None:
            raise ValueError("Invalid value for `achieved_points`, must not be `None`")  # noqa: E501

        self._achieved_points = achieved_points

    @property
    def assessment_ids(self):
        """Gets the assessment_ids of this StudentResults.  # noqa: E501


        :return: The assessment_ids of this StudentResults.  # noqa: E501
        :rtype: list[str]
        """
        return self._assessment_ids

    @assessment_ids.setter
    def assessment_ids(self, assessment_ids):
        """Sets the assessment_ids of this StudentResults.


        :param assessment_ids: The assessment_ids of this StudentResults.  # noqa: E501
        :type: list[str]
        """
        if assessment_ids is None:
            raise ValueError("Invalid value for `assessment_ids`, must not be `None`")  # noqa: E501

        self._assessment_ids = assessment_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StudentResults, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StudentResults):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
