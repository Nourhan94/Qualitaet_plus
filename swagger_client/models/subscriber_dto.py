# coding: utf-8

"""
    Student-Management-System-API

    The Student-Management-System-API. <a href='http://147.172.178.30:8080/stmgmt/api-json'>JSON</a>  # noqa: E501

    OpenAPI spec version: 2.7.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SubscriberDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'url': 'str',
        'events': 'object',
        'update_date': 'datetime'
    }

    attribute_map = {
        'name': 'name',
        'url': 'url',
        'events': 'events',
        'update_date': 'updateDate'
    }

    def __init__(self, name=None, url=None, events=None, update_date=None):  # noqa: E501
        """SubscriberDto - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._url = None
        self._events = None
        self._update_date = None
        self.discriminator = None
        self.name = name
        self.url = url
        self.events = events
        if update_date is not None:
            self.update_date = update_date

    @property
    def name(self):
        """Gets the name of this SubscriberDto.  # noqa: E501

        Name of your application.  # noqa: E501

        :return: The name of this SubscriberDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SubscriberDto.

        Name of your application.  # noqa: E501

        :param name: The name of this SubscriberDto.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def url(self):
        """Gets the url of this SubscriberDto.  # noqa: E501

        Complete URL to an endpoint in your application that receives HTTP-POST messages.  # noqa: E501

        :return: The url of this SubscriberDto.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this SubscriberDto.

        Complete URL to an endpoint in your application that receives HTTP-POST messages.  # noqa: E501

        :param url: The url of this SubscriberDto.  # noqa: E501
        :type: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def events(self):
        """Gets the events of this SubscriberDto.  # noqa: E501

        Map of events that you want to be notified about. Refer to the Event-Enum for event names. You can use 'ALL' to subscribe to all events.  # noqa: E501

        :return: The events of this SubscriberDto.  # noqa: E501
        :rtype: object
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this SubscriberDto.

        Map of events that you want to be notified about. Refer to the Event-Enum for event names. You can use 'ALL' to subscribe to all events.  # noqa: E501

        :param events: The events of this SubscriberDto.  # noqa: E501
        :type: object
        """
        if events is None:
            raise ValueError("Invalid value for `events`, must not be `None`")  # noqa: E501

        self._events = events

    @property
    def update_date(self):
        """Gets the update_date of this SubscriberDto.  # noqa: E501

        Date of the creation or latest update to the subscription.  # noqa: E501

        :return: The update_date of this SubscriberDto.  # noqa: E501
        :rtype: datetime
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this SubscriberDto.

        Date of the creation or latest update to the subscription.  # noqa: E501

        :param update_date: The update_date of this SubscriberDto.  # noqa: E501
        :type: datetime
        """

        self._update_date = update_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubscriberDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubscriberDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
