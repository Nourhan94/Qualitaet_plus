# coding: utf-8

"""
    Student-Management-System-API

    The Student-Management-System-API. <a href='http://147.172.178.30:8080/stmgmt/api-json'>JSON</a>  # noqa: E501

    OpenAPI spec version: 2.7.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UserSettingsDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'language': 'str',
        'allow_emails': 'bool',
        'blacklisted_events': 'object'
    }

    attribute_map = {
        'language': 'language',
        'allow_emails': 'allowEmails',
        'blacklisted_events': 'blacklistedEvents'
    }

    def __init__(self, language=None, allow_emails=None, blacklisted_events=None):  # noqa: E501
        """UserSettingsDto - a model defined in Swagger"""  # noqa: E501
        self._language = None
        self._allow_emails = None
        self._blacklisted_events = None
        self.discriminator = None
        self.language = language
        self.allow_emails = allow_emails
        if blacklisted_events is not None:
            self.blacklisted_events = blacklisted_events

    @property
    def language(self):
        """Gets the language of this UserSettingsDto.  # noqa: E501


        :return: The language of this UserSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this UserSettingsDto.


        :param language: The language of this UserSettingsDto.  # noqa: E501
        :type: str
        """
        if language is None:
            raise ValueError("Invalid value for `language`, must not be `None`")  # noqa: E501
        allowed_values = ["EN", "DE"]  # noqa: E501
        if language not in allowed_values:
            raise ValueError(
                "Invalid value for `language` ({0}), must be one of {1}"  # noqa: E501
                .format(language, allowed_values)
            )

        self._language = language

    @property
    def allow_emails(self):
        """Gets the allow_emails of this UserSettingsDto.  # noqa: E501


        :return: The allow_emails of this UserSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._allow_emails

    @allow_emails.setter
    def allow_emails(self, allow_emails):
        """Sets the allow_emails of this UserSettingsDto.


        :param allow_emails: The allow_emails of this UserSettingsDto.  # noqa: E501
        :type: bool
        """
        if allow_emails is None:
            raise ValueError("Invalid value for `allow_emails`, must not be `None`")  # noqa: E501

        self._allow_emails = allow_emails

    @property
    def blacklisted_events(self):
        """Gets the blacklisted_events of this UserSettingsDto.  # noqa: E501


        :return: The blacklisted_events of this UserSettingsDto.  # noqa: E501
        :rtype: object
        """
        return self._blacklisted_events

    @blacklisted_events.setter
    def blacklisted_events(self, blacklisted_events):
        """Sets the blacklisted_events of this UserSettingsDto.


        :param blacklisted_events: The blacklisted_events of this UserSettingsDto.  # noqa: E501
        :type: object
        """

        self._blacklisted_events = blacklisted_events

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserSettingsDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserSettingsDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
