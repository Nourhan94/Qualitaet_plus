# coding: utf-8

"""
    Student-Management-System-API

    The Student-Management-System-API. <a href='http://147.172.178.30:8080/stmgmt/api-json'>JSON</a>  # noqa: E501

    OpenAPI spec version: 2.7.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UserUpdateDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'role': 'str',
        'matr_nr': 'float',
        'email': 'str',
        'display_name': 'str'
    }

    attribute_map = {
        'role': 'role',
        'matr_nr': 'matrNr',
        'email': 'email',
        'display_name': 'displayName'
    }

    def __init__(self, role=None, matr_nr=None, email=None, display_name=None):  # noqa: E501
        """UserUpdateDto - a model defined in Swagger"""  # noqa: E501
        self._role = None
        self._matr_nr = None
        self._email = None
        self._display_name = None
        self.discriminator = None
        self.role = role
        if matr_nr is not None:
            self.matr_nr = matr_nr
        if email is not None:
            self.email = email
        self.display_name = display_name

    @property
    def role(self):
        """Gets the role of this UserUpdateDto.  # noqa: E501

        Role within the application.  # noqa: E501

        :return: The role of this UserUpdateDto.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this UserUpdateDto.

        Role within the application.  # noqa: E501

        :param role: The role of this UserUpdateDto.  # noqa: E501
        :type: str
        """
        if role is None:
            raise ValueError("Invalid value for `role`, must not be `None`")  # noqa: E501
        allowed_values = ["SYSTEM_ADMIN", "ADMIN_TOOL", "MGMT_ADMIN", "USER"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"  # noqa: E501
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def matr_nr(self):
        """Gets the matr_nr of this UserUpdateDto.  # noqa: E501


        :return: The matr_nr of this UserUpdateDto.  # noqa: E501
        :rtype: float
        """
        return self._matr_nr

    @matr_nr.setter
    def matr_nr(self, matr_nr):
        """Sets the matr_nr of this UserUpdateDto.


        :param matr_nr: The matr_nr of this UserUpdateDto.  # noqa: E501
        :type: float
        """

        self._matr_nr = matr_nr

    @property
    def email(self):
        """Gets the email of this UserUpdateDto.  # noqa: E501


        :return: The email of this UserUpdateDto.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserUpdateDto.


        :param email: The email of this UserUpdateDto.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def display_name(self):
        """Gets the display_name of this UserUpdateDto.  # noqa: E501


        :return: The display_name of this UserUpdateDto.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this UserUpdateDto.


        :param display_name: The display_name of this UserUpdateDto.  # noqa: E501
        :type: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")  # noqa: E501

        self._display_name = display_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserUpdateDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserUpdateDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
